start_state(entrance).
next_state(entrance,a,fail). 
next_state(entrance,b,foot).
next_state(entrance,c,entrance).
next_state(foot,a,fail). 
next_state(foot,b,fail).
next_state(foot,c,joy).


display_intro :-   
    write('intro'),nl,nl.
initialize :- asserta(stored_answer(moves,0)),
    asserta(stored_answer(treasure,0)).

goodbye :  stored_answer(moves,Count),
    write( 'You made this many moves...' ), 
    write( Count ), nl,   stored_answer(treasure,Amount),   write( 'You have this much money...$' ),   write( Amount ), nl,   write( 'Have a nice day'), nl.
show_state(entrance) :-   write('entrance'),nl.
show_state(foot) :-   write('foot'),nl.
show_state(fail) :-   write('fail'),nl.
show_state(joy) :-   write('joy'),nl.
get_choice(fail,q). get_choice(joy,q).
show_transition(entrance,a) :  write('light'),nl. 
show_transition(entrance,b) :  write('dark'),nl. 
show_transition(entrance,c) :  write('breathe'),nl. 
show_transition(foot,a) :  write('run'),nl. 
show_transition(foot,b) :  write('fight'),nl. 
show_transition(foot,c) :  write('sorry'),nl. show_transition(_,q) :-   write('quitter'),nl. 
show_transition(_,fail) :-   write( 'a,b,c, or q' ),nl.
% basic finite state machine engine
go :intro, start_state(X), show_state(X), get_choice(X,Y), go_to_next_state(X,Y).
intro :display_intro, clear_stored_answers, initialize.
go_to_next_state(_,q) :goodbye,!.
go_to_next_state(S1,Cin) :next_state(S1,Cin,S2), show_transition(S1,Cin), show_state(S2), stored_answer(moves,K), OneMoreMove is K + 1, retract(stored_answer(moves,_)), asserta(stored_answer(moves,OneMoreMove)), get_choice(S2,Cnew), go_to_next_state(S2,Cnew).
go_to_next_state(S1,Cin) :\+ next_state(S1,Cin,_), show_transition(S1,fail), get_choice(S1,Cnew), go_to_next_state(S1,Cnew).
get_choice(_,C) :    write('Next entry (letter followed by a period )? '),     read(C).
% case knowledge base - user responses :- dynamic(stored_answer/2).
% procedure to get rid of previous responses % without abolishing the dynamic declaration
clear_stored_answers :- retract(stored_answer(_,_)),fail. clear_stored_answers.
